<?php

/**
 * @file
 * A module that imports content from sites and creates nodes out of them.
 */

module_load_include('inc', 'simple_html_dom', 'classes');
module_load_include('inc', 'strip_attributes', 'classes');
module_load_include('inc', 'BuildMenu', 'classes');
module_load_include('inc', 'HtmlTags', 'classes');



/**
 * Implements hook_library_info()
 */
// function content_import_libraries_info() {
//   //Expected to be extracted into 'sites/all/libraries/simple_html_dom'.
//   $libraries['simple_html_dom'] = array(
//     'name' => 'Simple HTML Dom',
//     'vendor url' => 'http://simplehtmldom.sourceforge.net/',
//     'download url' => 'http://sourceforge.net/projects/simplehtmldom/files/simple_html_dom.php',
//     'files' => array(
//       'php' => array('simple_html_dom.php'),
//     ),
//     'version' => '1.5',
//  );

  //Expected to be extracted into 'sites/all/libraries/strip_attributes'.
//   $libraries['strip_attributes'] = array(
//     'name' => 'Strip Attributes',
//     'vendor url' => 'http://semlabs.co.uk',
//     'download url' => 'http://semlabs.co.uk/assets/files/strip_attributes.zip',
//     'files' => array(
//       'php' => array('StripAttributes.php'),
//     ),
//     'version' => '0.2.1',
//  );

//   return $libraries;
// }

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function content_import_help($path, $arg) {
  switch ($path) {
    case "admin/help#content_import":
      return '<p>' . t("Imports links and creates nodes form them.") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */

function content_import_block_info() {
  $blocks['content_import'] = array(
    'info' => t('Content Import'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
 * Implements hook_menu().
 */
function content_import_menu() {
  $items = array();

  $items['admin/config/content/content_import'] = array(
    'title' => 'Content Import',
    'description' => 'Configuration for Content Import module',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('content_import_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/content/content_import/rules'] = array(
    'title' => 'Content Import Rewrite Rules',
    'description' => 'Rewrite rules created by content_import module',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('content_import_rules_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['content_import'] = array(
    'title' => 'Content Import',
    'description' => 'Set Parameters for Content Importation',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('content_import_form'),
    //'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );



  return $items;
}

/**
 * Page callback: Content Import settings
 *
 * @see content_import_menu()
 */

function content_import_form($form, &$form_state) {
  $batch_name    = time();
  $content_types = node_type_get_names();

  $form['urls'] = array(
    "#type" => 'fieldset',
    "#title" => t('URLs'),
    '#weight' => 4, 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['urls']['batch_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter batch name'),
    '#description' => t('Human readable name for batch job. Default is seconds since the Unix Epoch.'),
    '#default_value' => t($batch_name)
  );

  $form['urls']['url_list'] = array(
    '#type' => 'textarea', 
    '#title' => t('URL(s) to page crawl for links'), 
    '#description' => t('Enter one URL per line must include protocol moniker (ex.: http://, ftp://, smb://, etc.)'),
    '#required' => TRUE,
    '#default_value' => t("http://localhost/index.html")
  );


  $form['urls']['content_type'] = array(
     '#type' => 'select',
     '#title' => t('Select Content Type'),
     '#options' => $content_types,
     '#default_value' => "page"
  );

  // $form['urls']['taxonomy_list'] = array(
  //   '#type' => 'select',
  //   '#title' => 'Select Taxonomy',
  //   '#options' => get_taxonomy_vocabularies(),
  //   '#ajax' => array(
  //     'callback' => 'ajax_terms_callback',
  //     'wrapper' => 'term-list-div',
  //     'method' => 'replace'
  //   )
  // );

  // $form['urls']['term_list'] = array(
  //   '#title' => 'Select Term',
  //   '#type' => 'select',
  //   '#prefix' => '<div id="term-list-div">',
  //   '#suffix' => '</div>',
  //   '#options' => drupal_map_assoc(array(t('Select')))
  // );

  $form['urls']['menu_list'] = array(
    '#title' => 'Select Menu',
    '#description' => 'General only used to assign a node of Basic content type to a menu',
    '#type' => 'select',
    '#prefix' => '<div id="menu-list-div">',
    '#suffix' => '</div>',
    '#options' => get_menu_list()
  );

  $form['urls']['enable_menu'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable',
    '#description' => t('Enable menu when node is created.'),
    '#default_value' => 0
  );

  // $form['attachments'] = array(
  //   "#type" => 'fieldset',
  //   "#title" => t('Attachments'),
  //   '#weight' => 5, 
  //   '#collapsible' => TRUE, 
  //   '#collapsed' => FALSE,
  // );

  // $form['attachments']['get_file'] = array(
  //   '#type' => 'radios',
  //   '#title' => t('Get Attachments'),
  //   '#description' => t('Download images, documents, audio files, etcetera.'),
  //   '#options' => drupal_map_assoc(
  //     array(
  //       t('none'),
  //       t('all'),
  //       t('some (buggy)')
  //     )
  //   ),
  //   '#default_value' => t('none')
  // );

  // $form['attachments']['custom_files'] = array(
  //   '#type' => 'textfield',
  //   '#title' => t('Enter file extension types to be downloaded separated by commas'),
  //   '#description' => t('example: jpg, pdf, tiff'),
  //   '#states' => array(
  //   'invisible' => array(
  //    ':input[name="get_file"]' => array('value' => 'none', 'value' => 'all'),
  //   ),
  //   'visible' => array(
  //   ':input[name="get_file"]' => array('value' => 'some')
  //   ),
  // ),
  // );

$form['title'] = array(
  '#type'        => 'fieldset',
  '#title'       => 'Title',
  '#collapsible' => TRUE,
  '#collapsed'   => FALSE
);

$form['title']['title-options'] = array(
  '#type' => 'radios',
  '#title' => '',
  '#options' => [
    'default'   => 'Default', 
    'alt-class' => 'Class', 
    'alt-div'   => 'Div'
  ],
  '#default_value' => 'default'
);

$form['title']['alt-class'] = array(
  '#type'        => 'textfield',
  '#title'       => '',
  '#description' => 'Class name to use to identity element used for title',
  '#states' => array(
    'invisible' => array(
      ':input[name="title-options"]' => array('value' => 'default'),
      ':input[name="title-options"]' => array('value' => 'alt-div')
    ),
    'visible' => array(
       ':input[name="title-options"]' => array('value' => 'alt-class')
    ),
  )
);

$form['title']['alt-div'] = array(
  '#type'        => 'textfield',
  '#title'       => '',
  '#description' => 'Div id to use to identity element used for title',
  '#states' => array(
    'invisible' => array(
      ':input[name="title-options"]' => array('value' => 'default'),
      ':input[name="title-options"]' => array('value' => 'alt-class')
    ),
    'visible' => array(
       ':input[name="title-options"]' => array('value' => 'alt-div')
    ),
  )
);

$form['title']['strip-from-title'] = array(
  '#type' => 'checkbox',
  '#title' => 'Strip from title',
  '#description' => 'Strip text from title.',
  '#default_value' => 0,
);

$form['title']['strip-title-text'] = array(
  '#type' => 'textfield',
  '#description' => 'Enter text to remove from title. This will affect all titles in the current batch.',
  '#states' => array(
    'visible' => array(
        ':input[name="strip-from-title"]' => array('checked' => TRUE)
      ),
    'invisible' => array(
        ':input[name="strip-from-title"]' => array('checked' => FALSE)
      ),
  ),
);

$form['html_tags'] = array(
  '#type'        => 'fieldset',
  '#title'       => 'HTML Tags',
  '#collapsible' => TRUE,
  '#collapsed'   => FALSE
);

$form['html_tags']['body'] = array(
    '#type'          => 'checkbox',
    '#title'         => 'body',
    '#description'   => t('This will get all content between &lt;body&gt;&lt;/body&gt; tags. Uncheck this box to specify a div.'),
    '#default_value' => 1,
    '#weight'        => -10,
);

$form['html_tags']['remove-inline-styles'] = array(
    '#type'          => 'checkbox',
    '#title'         => t("Remove inline styles"),
    '#default_value' => 1,
    '#weight'        => -8,
);

$form['html_tags']['non-body_tags'] = array(
    '#type'        => 'fieldset',
    '#title'       => t(''),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="body"]' => array('checked' => FALSE)
      ),
      'invisible' => array(
         ':input[name="body"]' => array('checked' => TRUE)
      )
    )
  );

  $form['html_tags']['non-body_tags']['div'] = array(
    '#type' => 'textfield',
    '#title' => 'Div id',
    '#description' => 'Extract only specified div id(s) (separated by spaces) and add to node body.',
    '#weight' => -9,
  );

// $form['html_tags']['non-body_tags']['class'] = array(
//     '#type' => 'textfield',
//     '#title' => 'Class name',
//     '#description' => ''
// );

  // $form['html_tags']['non-body_tags']['div-depth'] = array(
  //   '#type' => 'textfield',
  //   '#title' => t('Div depth'),
  //   '#description' => t('Depth to which to decend into the DOM, starting at 0')
  // );
/*
  $form['html_tags']['non-body_tags']['tags'] = array(
    '#type' => 'multiselect',
    '#title' => 'HTML tags',
    '#options' => get_html_tags(),
    '#default_value' => ''
  );
*/
/*
  $form['html_tags']['non-body_tags']['checkboxes'] = array(
    '#type' => 'checkboxes',
    '#options' => drupal_map_assoc(get_html_tags())
  );
  */

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 10
  );

  return $form;
}

function content_import_rules_form() {
  $form['download_rules'] = array(
    '#type'        => 'fieldset',
    '#title'       => 'Download Rewrite Rules',
    '#collapsible' => TRUE, 
    '#collapsed'   => FALSE
    );

  $form['download_rules']['rules'] = array(
    '#type' => 'select',
    '#title' => t('Select rule to download'),
    '#options' => get_rules(),
    '#description' => t('Select a rewrite to add to source filesystems configuration.')
  );

  $form['download_rules']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );

  return $form;
}

 function content_import_config_form() {

  $form['undo'] = array(
    '#type' => 'fieldset',
    '#title' => 'Undo',
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE
  );

  $form['undo']['batch_name'] = array(
    '#type' => 'select',
    '#title' => t('Select batch(es) to delete'),
    '#options' => drupal_map_assoc(get_batch_names()),
    '#description' => t('Permanently delete nodes in batch(es). This cannot be undone.')
  );

  $form['undo']['submit_undo'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );

    return $form;
}

/**
* Validate the form.
*/
function content_import_form_validate($form, &$form_state) 
{
  /*
  $url = $form_state['values']['url_list'];
  if(filter_var($url, FILTER_VALIDATE_URL) == FALSE)
  {
    form_set_error('url', t("Invalid URL " . $form_state['values']['url_list']));
  }
  */
}

function content_import_rules_form_submit($form, &$form_state) {
    //download or display selected rewrite
    print_r($form_sate['values']);
    // $form['values']['download_rule']['rules'];
    download_rule();
}

function content_import_form_submit($form, &$form_state) 
{
  // echo gettype($form_state['values']['strip-from-title']);
  // die("<br>".__FILE__.":".__LINE__);
  $url_list       = $form_state['values']['url_list'];
  $urls           = get_urls($url_list);
  //$html_tag_list  = $form_state['values']['tags'];
  $content_type   = $form_state['values']['content_type'];
  $batch_name     = $form_state['values']['batch_name'];
  $title          = "Title Goes Here";
  $inline_style   = $form_state['values']['remove-inline-styles'];

  foreach($urls as $url) {
    $input          = @file_get_contents($url) or die("Could not access file: $url");
    $node           = new stdClass();   // Create a new node object
    $node->type     = $content_type;    // Or page, or whatever content type you like
    node_object_prepare($node);       // Set some default values
    $title = get_title($url,$form_state['values']);

    if($form_state['values']['strip-from-title'] == 1) {
      $title = str_replace($form_state['values']['strip-title-text'], '', $title);
    }

    $node->title    = trim($title);
    $node->language = LANGUAGE_NONE;    // Or e.g. 'en' if locale is enabled
    $node->status   = 1;          //(1 or 0): published or not
    $node->promote  = 0;          //(1 or 0): promoted to front page
    $node->sticky   = 0;          //(1 or 0): sticky at top of lists
    $node->comment  = 1;          //2 = comments on, 1 = comments off
    $node->uid      = $GLOBALS['user']->uid; // UID of the author of the node as currently logged in user

    //get whole body of target page or specified HTML tags from target page as bodytext
    if($form_state['values']['body'] == TRUE)  {
      $bodytext = get_element($url, "body");
    } else {
      $element  = $form_state['values']['div'];
      $bodytext = get_element($url, $element);
    }

    if($inline_style) {
      $html_tags = new HtmlTags();
      $notAllowedAttributes = $html_tags->getHtmlAttributes();
      $bodytext = strip_attributes($bodytext, $notAllowedAttributes, []);
    }

    $node->body[$node->language][0]['value']   = $bodytext;
    $node->body[$node->language][0]['summary'] = text_summary($bodytext);
    $node->body[$node->language][0]['format']  = 'full_html';

    $node->menu = [
      'link_title' => $node->title,
      //'menu_name' => $form_state['values']['menu_list'],
      'plid' => $form_state['values']['menu_list'],
      'enabled' => ($form_state['values']['enable_menu']),s
    ];

    attach_file($url, $node, 
      $form_state['values']['get_file'],
      array($form_state['values']['custom_files'])
    );

    //pathauto will override the below path
    //pathauto mysteriously stopped overriding this, so removing it
    //$path = 'node_created_on' . date('YmdHis');
    //$node->path = array('alias' => $path);

    if($node = node_submit($node)) { // Prepare node for saving
      node_save($node);
      add_batch_log($node->nid, $batch_name);
      $alias = "https://www.msha.gov/" . drupal_get_path_alias("node/{$node->nid}");
      $rule = create_asp_rewrite($node->title, $url, $alias);
      add_rewrite_to_file($node->title, $rule);
      drupal_set_message(t('The node was added successfully.'), 'status');
    }
  }
}

/**
 * Parse a list of URLs submitted via a textarea and put them into an array
 */
function get_urls($url_list)
{
  //put list of URLS in textarea into an array
  //TODO: check for empty array and return message
  $urls = preg_split("/[\r\n,]+/", $url_list);
  return $urls;
}

function attach_file($path, $node, $file, $mime_list)
{
  //TODO: only process files of specific mime-types--switch?
  switch($file)
  {
    case "all":
      $attachment = file_get_contents($path);
      $file = file_save_data($attachment, 'public://' . drupal_basename($path),FILE_EXISTS_REPLACE);
      $file->display = 1;
      $file->description = "";
      $node->field_attachment = array(
        LANGUAGE_NONE => array(
          '0' => (array)$file
        )
      );
    break;
    case "some":
      //$mime_list = array('txt', 'rtf', 'jpeg', 'jpg', 'png', 'pdf', 'doc', 'docx', 'xls', 'xlsx');
      foreach ($mime_list as $mime) 
      {
        if(check_mime_type($mime, $mime_list))
        {
          $attachment = file_get_contents($path);
          $file = file_save_data($attachment, 'public://' . drupal_basename($path),FILE_EXISTS_REPLACE);
          $file->display = 1;
          $file->description = "";
          $node->field_attachment = array(
            LANGUAGE_NONE => array(
              '0' => (array)$file
            )
          );
        }
      }
    break;
    default:
  }
}

function get_taxonomy_vocabularies () {
  $taxonomies = taxonomy_get_vocabularies();
  $vocabularies = array();
  foreach($taxonomies as $t)
  {
    // array('return_value1' => t('Display Value 1')
    //$vocabularies['name'] = $t->name;
    // $vocabularies[] = $t->vid;
    $vocabularies[$t->vid] = $t->name;
  }

  return $vocabularies;
}

function get_vocabulary_list ($vid)
{
  //get all of the taxonomy vocabularies
  $vocabularies = taxonomy_get_vocabularies();

  //get a  vocabulary specified by vocabulary id argument
  $v = $vocabularies[$vid]->vid;

  //get the  taxonomy tree of the specified vocabulary
  $trees = taxonomy_get_tree($v);

  /*
  //store list of vocabulary items
  $key = array();
  $value = array();
  

  //iterate through taxonomy tree and add item name to list
  foreach ($trees as $tree)
  {
    $key[]  = "$tree->vid";
    $value[] = "$tree->name";
  }

  //return array_combine($key, $value);
  return array('foo', 'bar');
  */
}

function add_batch_log($nid, $batch_name) 
{
  $table = "content_import_log";
  $record = array(
    'nid' => $nid,
    'batch_name' => $batch_name
  );

  drupal_write_record($table, $record);

  return;
}

function get_batch_names()
{
  $result = db_query('SELECT batch_name FROM {content_import_log}', array());

  $names = $result->fetchAllAssoc('batch_name');

  $batch = array();

  foreach ($names as $name)
  {
    $batch[] =  $name->batch_name;
  }

  return $batch;
}

function get_batch_nids($batch_name)
{
  $result = db_query('SELECT nid FROM {content_import_log}', array(':batch_name' => $batch_nme));

  $nids = $result->fetchAllAssoc('nid');

  $batch = array();

  foreach ($nids as $nid)
  {
    $batch[] =  $nid->nid;
  }

  return $batch;
}

function get_batch_lids($batch_name)
{
  $result = db_query('SELECT lid FROM {content_import_log}', array(':batch_name' => $batch_name));

  $lids = $result->fetchAllAssoc('lid');

  $batch = array();

  foreach ($lids as $lid)
  {
    $batch[] =  $lid->lid;
  }

  return $batch;
}

function delete_batch_nodes($batch_name)
{
  $batch = get_batch_nids($batch_name);

  foreach($batch as $b)
  {
    node_delete($b);
  }

  //clear batch from log
  delete_batch($batch_name);

}

function delete_batch($batch_name)
{
  $batch = get_batch_lids($batch_name);

  foreach($batch as $b)
  {
    $num_deleted = db_delete('content_import_log')
      ->condition('batch_name', $batch_name)
      ->execute();
  }
}

function get_mime_type($url) {
    $buffer = file_get_contents($url);
    $finfo = new finfo(FILEINFO_MIME_TYPE);
    $type = preg_replace('%^[a-z]+\/%', '', $finfo->buffer($buffer));
    return $type;
}


function check_mime_type($urls, $types)
{
  //$types = array('pdf', 'doc', 'docx', 'png', 'jpg');
  foreach($types as $t)
  {
    if(get_mime_type($urls) == $t)
    {
      return true;
    } else {
      return false;
    }
  }
}

/**
 * @param file 
 *  URL to html file
 */
// function strip_attributes ($html) {
//   $sa = new strip_attributes();
//   $sa->allow = array( 'id', 'class' );
//   $sa->exceptions = array( 
//     'img' => array( 'src', 'alt' ),
//     'a' => array( 'href', 'title' )
//   );
//   $sa->ignore = array();

//   return $sa->strip($html);
// }

function strip_attributes($html, $notAllowedAttributes, $allowedAttributes) {
  $sa = new StripAttributes();

  foreach($notAllowedAttributes as $na) {
      if(in_array($na, $allowedAttributes))
      {
          for($i = 0; $i < count($allowedAttributes); $i++)
          {
              if($allowedAttributes[$i] == $na)
              {
                  unset($allowedAttributes[$i]);
              } 
          }
      }
  }

  $sa->allow = $allowedAttributes;
  $output = $sa->strip($html);

  return $output;
}

/**
 * @param file 
 *  URL to html file
 * @param element
 *  Array of html tags to retrieve
 * @param strip_attributes
 *  Strip HTML tag attributes
 */
// function get_element($file, $element, $depth = 0)
// {
//   //get specified element from crawled page
//   $html = new simple_html_dom();
//   $html->load_file($file);

//   //get first element in array of found elements
//   $e = $html->find("{$element}", $depth);

//   switch($element)
//   {
//     case 'body':
//       $e = str_replace('<body>', '', $e);
//       $e = str_replace('</body>', '', $e);
//       return $e;
//     break;
//     default:
//       return $e;
//   }
// }
// 
function get_title($file, $values) {
  // print_r($values);
  // die("<br><span style='color: red'>".__FILE__.":".__LINE__."</span>");
  $html = new simple_html_dom();
  $html->load_file($file);
  switch ($values['title-options']) {
    case 'default':
        $output = $html->find('title', 0);
        break;
    case 'alt-class':
        $output = $html->find("." . $values['alt-class'], 0);
        break;
    case 'alt-div':
        $output = $html->find("#" . $values['alt-div'], 0);
        break;
  }

  // if($alt_title) {
  //   $output = $html->find('title', 0);
  // } else {
  //   $output = $html->find('title', 0);
  // }
  

  return $output->plaintext;
}

function get_element($file, $element, $depth = 0) {
  $element = explode(' ', $element);
  $output  = '';
  $html    = new simple_html_dom();
  $html->load_file($file);

  foreach($element as $div)
  {
      $output .= $html->getElementById("{$div}");
  }

  return $output;
}

function get_html_tags()
{
  $list = array();
  $vocabs = taxonomy_get_vocabularies();
  foreach($vocabs as $v)
  {
    if($v->machine_name == "html_tags")
    {
      $tree = taxonomy_get_tree($v->vid);
      foreach($tree as $t)
      {
        $list[] = $t->name;
      }
    }
  }

  return $list;
}

function get_menu_list() {
  $menu = new BuildMenu();
  return $menu->get_menu_list();
}

function create_asp_rewrite($title, $oldUrl, $newUrl) {
    $old = parse_url($oldUrl);
    $rule = <<< RULE
        <rule name="{$title}" patternSyntax="ExactMatch" stopProcessing="true">
            <match url="{$old['path']}" />
            <action type="Redirect" url="{$newUrl}" />
        </rule>
RULE;

    return $rule;
}

function add_rewrite_to_file($title, $rule) {
    $title = preg_replace('@[\ ]+@', '-', $title);
    $file  = __DIR__ . "/rules/{$title}";
    file_put_contents($file, $rule, FILE_APPEND);
}

function get_rules() {
    $rules = scandir(__DIR__ . "/rules");
    return $rules;
}

function download_rule($rule) {
    return file_get_contents(__DIR__ . '/rules/' . $rules);
}
