<?php

/**
 * @file
 * A module that imports content from sites and creates nodes out of them.
 */

module_load_include('inc', 'content_import', 'classes/simple_html_dom');
module_load_include('inc', 'content_import', 'classes/strip_attributes');
module_load_include('inc', 'content_import', 'classes/BuildMenu');
module_load_include('inc', 'content_import', 'classes/HtmlTags');

require_once(__DIR__.'/include/batch.inc');
require_once(__DIR__.'/include/rewrite.inc');
require_once(__DIR__.'/include/functions.inc');
require_once(__DIR__.'/include/taxonomy_vocab.inc');
require_once(__DIR__.'/include/files.inc');
require_once(__DIR__.'/include/dom_manipulation.inc');
require_once(__DIR__.'/include/forms.inc');

/**
* Validate the form.
*/
function content_import_form_validate($form, &$form_state) 
{
  /*
  $url = $form_state['values']['url_list'];
  if(filter_var($url, FILTER_VALIDATE_URL) == FALSE)
  {
    form_set_error('url', t("Invalid URL " . $form_state['values']['url_list']));
  }
  */
}

function content_import_rules_form_submit($form, &$form_state) {
    //download or display selected rewrite
    print_r($form_sate['values']);
    // $form['values']['download_rule']['rules'];
    download_rule();
}

function content_import_form_submit($form, &$form_state) 
{
  //die("<br>".__FILE__.":".__LINE__);
  $url_list         = $form_state['values']['url_list'];
  $urls             = get_urls($url_list);
  $content_type     = $form_state['values']['content_type'];
  $batch_name       = $form_state['values']['batch_name'];
  $title            = "Title Goes Here";
  $strip_attributes = $form_state['values']['strip-element-attributes'];

  if(isset($form_state['values']['allowed-element-attributes'])) {
    $allowedAttributes = explode(',', $form_state['values']['allowed-element-attributes']);
  } else {
    $allowedAttributes = array();
  }

  foreach($urls as $url) {
    //$input      = @file_get_contents($url) or die("Could not access file: $url");
    try {
      $input = @file_get_contents($url);
    } catch (Exception $e) {
      echo $e->getMessage();
      die("<br>".__FILE__.":".__LINE__);
    }

    $node       = new stdClass();   // Create a new node object
    $node->type = $content_type;    // Or page, or whatever content type you like
    node_object_prepare($node);       // Set some default values
    $title = get_title($url,$form_state['values']);

    if($form_state['values']['strip-from-title'] == 1) {
      $title = str_replace($form_state['values']['strip-title-text'], '', $title);
    }

    $node->title    = trim($title);
    $node->language = LANGUAGE_NONE;    // Or e.g. 'en' if locale is enabled
    $node->status   = 1;          //(1 or 0): published or not
    $node->promote  = 0;          //(1 or 0): promoted to front page
    $node->sticky   = 0;          //(1 or 0): sticky at top of lists
    $node->comment  = 1;          //2 = comments on, 1 = comments off
    $node->uid      = $GLOBALS['user']->uid; // UID of the author of the node as currently logged in user

    //get whole body of target page or specified HTML tags from target page as bodytext
    if($form_state['values']['body'] == TRUE)  {
      $bodytext = get_element($url, "body");
    } else {
      $element  = $form_state['values']['div'];
      $bodytext = get_element($url, $element);
    }

    if($strip_attributes) {
      $html_tags = new HtmlTags();
      $notAllowedAttributes = $html_tags->getHtmlAttributes();
      $bodytext = strip_attributes($bodytext, $notAllowedAttributes, $allowedAttributes);
    }

    if($form_state['values']['extract_date']) {
       $node->date = extract_date_from_content($input, $form_state['values']['extract_date']);
    }

    $node->body[$node->language][0]['value']   = $bodytext;
    $node->body[$node->language][0]['summary'] = text_summary($bodytext);
    $node->body[$node->language][0]['format']  = 'full_html';

    $node->menu = [
      'link_title' => $node->title,
      //'menu_name' => $form_state['values']['menu_list'],
      'plid' => $form_state['values']['menu_list'],
      'enabled' => ($form_state['values']['enable_menu']),
    ];

    // attach_file($url, $node, 
    //   $form_state['values']['get_file'],
    //   array($form_state['values']['custom_files'])
    // );

    //pathauto will override the below path
    //pathauto mysteriously stopped overriding this, so removing it
    //$path = 'node_created_on' . date('YmdHis');
    //$node->path = array('alias' => $path);

    if($node = node_submit($node)) { // Prepare node for saving
      node_save($node);

      add_batch_log($node->nid, $batch_name);
      $alias = "https://www.msha.gov/" . drupal_get_path_alias("node/{$node->nid}");

      try {
        create_redirect($node->nid,$form_state['values']['rewrite_type'],$node->title, $url, $alias);
      } catch (Exception $e) {
        echo $e->getMessage();
        die("<br>".__FILE__.":".__LINE__);
      }
      
      $links = extract_urls($node->body[$node->language][0]['value']);

      foreach ($links as $link) {
        try {
          add_url($node->nid, $link);
        } catch (Exception $e) {
          echo $e->getMessage();
          die("<br>".__FILE__.":".__LINE__);
        }
        
      }

      drupal_set_message(t('The node was added successfully.'), 'status');
    }
  }
}

/** date functions*/

/**
 * Extract date from HTML content
 * @param  string $content HTML content
 * @param  string $existing_format PHP regex to find date in content
 * @param  string $desired_format  PHP date format
 * @return string Date string in desired format
 */
//TODO: date validation
function extract_date_from_content($content, $existing_format = null, $desired_format = null) {
    if($existing_format == null) {
        $existing_format = '%[a-zA-Z]+\ [0-9]+\, [0-9]+%';
    }

    if($desired_format == null) {
        $desired_format = 'Y-m-d 00:00:00 -0500';
    }

    preg_match_all($existing_format, $content, $matches);

    $extracted_date = $matches[0][0];

    // switch ($format) {
    //   case 'd/m/Y':
    //     $formatted_date = DateTime::createFromFormat('d/m/Y', $extracted_date);
    //     break;
      
    //   case 'F d, Y':
    //     $formatted_date = DateTime::createFromFormat('F d, Y', $extracted_date);
    //     break;
    // }
    // $formatted_date = DateTime::createFromFormat('F d, Y', $extracted_date);
    $formatted_date = DateTime::createFromFormat('d/m/Y', $extracted_date);

    return $formatted_date->format($desired_format);
}

/** end date functions */
